@page "/Blogpost/Read/{Id:int}"
@using Domain.Repositories.Implementations
@using Model.Entities

@inject BlogPostRepository blogPostRepository
@inject CommentRepository commentRepository
@inject UserRepository userRepository

@inject AuthenticationStateProvider authenticationStateProvider

<MudStack>
    <MudPaper Class="px-8 py-8">
        <ReadBlogPost BlogPost="@blogPost"></ReadBlogPost>
    </MudPaper>
    <UserInfo User="@author"></UserInfo>
    <AuthorizeView>
        <Authorized>
            <WriteComment User="@user" Post="@blogPost" ResetOnCreate="true" OnCreatedComment="@OnCommentCreate"/>
        </Authorized>    
    </AuthorizeView>
    @if(comments != null) {
        @foreach (var c in comments)
        {
                <ReadComment User="@user" Comment="@c"/>
        }
    }
</MudStack>
@code
{
    private BlogPost blogPost { get; set; }
    private List<Comment> comments { get; set; }
    private User author { get; set; }
    
    private User user { get; set; }
    
    [Parameter]
    public int Id { get; set; }

    protected override async Task OnInitializedAsync()
    {
       base.OnInitializedAsync();

        blogPost = await blogPostRepository.ReadAsync(Id);
        author = await userRepository.GetUserByPost(blogPost);
        comments = await commentRepository.GetCommentsByPost(blogPost);
        
        var _user = (await authenticationStateProvider.GetAuthenticationStateAsync()).User;
        if(_user.Identity.IsAuthenticated)
        {
            user = (await userRepository.ReadAsync(u => u.UserName == _user.Identity.Name)).First();
        } 
    }

    private async Task OnCommentCreate(Comment created)
    {
        comments.Add(created);
        StateHasChanged();
    }

}